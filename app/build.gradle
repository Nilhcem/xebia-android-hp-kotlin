apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: rootProject.file('gradle/unit-tests.gradle')

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    defaultConfig {
        applicationId 'com.nilhcem.henripotier'
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName '1.0'

        resConfig 'en'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        // Should be the default flavor.
        prod {
            buildConfigField 'String', 'WS_ENDPOINT', '"http://henri-potier.xebia.fr/"'
        }

        // Mock server for instrumentation tests.
        mock {
            buildConfigField 'String', 'WS_ENDPOINT', '"http://' + getLocalIp() + ':8990/"'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile 'org.jetbrains.anko:anko:0.6.2-15s'

    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"

    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.github.bumptech.glide:glide:3.6.1'
}

def getLocalIp() {
    for (NetworkInterface iface : NetworkInterface.networkInterfaces) {
        for (InetAddress addr : iface.inetAddresses) {
            if (!addr.isLoopbackAddress()) {
                def ip = addr.hostAddress
                if (ip.startsWith('192.')) {
                    return ip
                }
            }
        }
    }
}
